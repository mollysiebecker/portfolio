{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Final Project"
      ],
      "metadata": {
        "id": "lIzvepTavQLm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Molly Siebecker\n",
        "\n",
        "DATA 604\n",
        "\n",
        "CUNY SPS\n",
        "\n",
        "Summer 2024"
      ],
      "metadata": {
        "id": "WIxUanwNvSDb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Problem"
      ],
      "metadata": {
        "id": "1oSrnF4Dx-h1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Let's say that we have a county library system with two categories of books: standard books and new arrivals. To account for the higher demand of the new arrivals, they are limited to a check out time of only two weeks, as opposed to the standard three weeks. New arrivals are moved into the standard category after six months.\n",
        "\n",
        "This library system has multiple branches, and patrons can request books currently located at any branch. Patrons request a book online, at which point their place in line is held. Once a copy is available, it is transported to the patron's selected branch, where it is held until they pick it up. Once the book is due, it is either returned, or it becomes overdue. Once overdue, it can either be returned (late,) or, after a time limit, it is deemed \"lost\" and the patron must pay for a replacement. Returned books are placed back on the shelf.\n",
        "\n",
        "The library is seeking to maximize the percentage of the total books that are either available (on the shelf) or currently in the hands of a reader (checked out,) excluding books that are overdue or lost. One way to increase the number of books available is to provide longer check out times, for both the standard books and the new books. In this simulation, I will look to find the combination or ratio of check out times that maximizes the percentage of books that are either available or checked out.\n",
        "\n",
        "Libraries perform an essential public service, and it is in their interest and the interest of their patrons to keep as many books either available to be checked out or in the hands of readers as possible."
      ],
      "metadata": {
        "id": "221oJxp5Xhj-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Flow-Chart Model"
      ],
      "metadata": {
        "id": "5SHoyxu6yBIY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "![Library System Flow Chart](https://github.com/mollysiebecker/cunysps_data604/blob/main/604_final_flow_chart.jpg?raw=true)"
      ],
      "metadata": {
        "id": "NCkzBDhICouu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Simulation"
      ],
      "metadata": {
        "id": "BX9FobZMyF5O"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# download modsim.py if necessary\n",
        "\n",
        "from os.path import basename, exists\n",
        "\n",
        "def download(url):\n",
        "    filename = basename(url)\n",
        "    if not exists(filename):\n",
        "        from urllib.request import urlretrieve\n",
        "        local, _ = urlretrieve(url, filename)\n",
        "        print('Downloaded ' + local)\n",
        "\n",
        "download('https://github.com/AllenDowney/ModSimPy/raw/master/' +\n",
        "         'modsim.py')\n",
        "\n",
        "# import libraries and functions\n",
        "\n",
        "from modsim import *\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from mpl_toolkits.mplot3d import Axes3D\n",
        "import random\n",
        "\n",
        "random.seed(24)"
      ],
      "metadata": {
        "id": "6BL397VV_ztl"
      },
      "execution_count": 450,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Defining Parameters and Functions"
      ],
      "metadata": {
        "id": "ixW5y3N1J1YV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# define number of days until new requests come in\n",
        "standard_request_time = 2\n",
        "new_request_time = 1\n",
        "\n",
        "alpha = 1 / standard_request_time\n",
        "beta = 1 / new_request_time\n",
        "\n",
        "# define number of days patrons wait in line after request\n",
        "wait_time_standard = 3\n",
        "wait_time_new = 21\n",
        "\n",
        "gamma = 1 / wait_time_standard\n",
        "delta = 1 / wait_time_new\n",
        "\n",
        "# define number of days in transit\n",
        "time_in_transit = 4\n",
        "\n",
        "epsilon = 1 / time_in_transit\n",
        "\n",
        "# define number of days a books waits to be picked up\n",
        "days_awaiting_pickup = 3\n",
        "\n",
        "zeta = 1 / days_awaiting_pickup\n",
        "\n",
        "# define check out times\n",
        "standard_check_out_time = 21\n",
        "new_check_out_time = 14\n",
        "\n",
        "eta = 1 / standard_check_out_time\n",
        "theta = 1 / new_check_out_time\n",
        "\n",
        "# define fraction of patrons that return book (both on time and eventually)\n",
        "kappa = 0.9\n",
        "\n",
        "# define number of days until book is considered lost\n",
        "time_until_lost = 30\n",
        "\n",
        "iota = 1 / time_until_lost\n",
        "\n",
        "# define number of days to re-shelve returned book\n",
        "time_until_shelved = 1\n",
        "\n",
        "mu = 1 / time_until_shelved\n",
        "\n",
        "# define number of days to replace lost book\n",
        "time_until_replaced = 10\n",
        "\n",
        "nu = 1 / time_until_replaced\n",
        "\n",
        "# define number of days until a new book is re-categorized as standard\n",
        "time_until_standard = 156\n",
        "\n",
        "rho = 1 / time_until_standard\n",
        "\n",
        "# define number of new books per day\n",
        "new_orders = 20"
      ],
      "metadata": {
        "id": "sQapIV-iCkiO"
      },
      "execution_count": 451,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The end time of the system will be set to 1,095 days (approximately 3 years.) This will allow the simulation sufficient time to run and reach equilibrium, considering that the new books move into the standard category after six months."
      ],
      "metadata": {
        "id": "Ds3J58nQOISN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# function to make system\n",
        "def make_system(alpha, beta, gamma, delta, epsilon, zeta, eta, theta, iota, kappa, mu, nu, rho, new_orders):\n",
        "    init = State(sbk=45000, nbk=5000, srq=100, nrq=50, strn=50, ntrn=70, srd=300, nrd=200, sch=4000, nch = 1000, srt=100, nrt=100,\n",
        "                 sovr=200, novr=150, slo=30, nlo=20)\n",
        "\n",
        "    return System(init=init, t_end=1095,\n",
        "                  alpha=alpha, beta=beta, gamma=gamma, delta=delta, epsilon=epsilon, zeta=zeta, eta=eta,\n",
        "                  theta=theta, iota=iota, kappa=kappa, mu=mu, nu=nu, rho=rho, new_orders=new_orders)"
      ],
      "metadata": {
        "id": "RNODr8iwAJUJ"
      },
      "execution_count": 452,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# update function\n",
        "def update_func(t, state, system):\n",
        "    sbk, nbk, srq, nrq, strn, ntrn, srd, nrd, sch, nch, srt, nrt, sovr, novr, slo, nlo = \\\n",
        "    state.sbk, state.nbk, state.srq, state.nrq, state.strn, state.ntrn, state.srd, state.nrd, state.sch, state.nch, \\\n",
        "    state.srt, state.nrt, state.sovr, state.novr, state.slo, state.nlo\n",
        "\n",
        "    s_requested = system.alpha * sbk\n",
        "    n_requested = system.beta * nbk\n",
        "    s_transit = system.gamma * srq\n",
        "    n_transit = system.delta * nrq\n",
        "    s_ready = system.epsilon * strn\n",
        "    n_ready = system.epsilon * ntrn\n",
        "    s_checked_out = system.zeta * srd\n",
        "    n_checked_out = system.zeta * nrd\n",
        "    s_returned_on_time = system.kappa * system.eta * sch\n",
        "    n_returned_on_time = system.kappa * system.theta * nch\n",
        "    s_overdue = (1-system.kappa) * system.eta * sch\n",
        "    n_overdue = (1-system.kappa) * system.theta * nch\n",
        "    s_returned_late = system.kappa * system.iota * sovr\n",
        "    n_returned_late = system.kappa * system.iota * novr\n",
        "    s_lost = (1-system.kappa) * system.iota * sovr\n",
        "    n_lost = (1-system.kappa) * system.iota * novr\n",
        "    s_shelved = system.mu * srt\n",
        "    n_shelved = system.mu * nrt\n",
        "    s_replaced = system.nu * slo\n",
        "    n_replaced = system.nu * nlo\n",
        "    s_shelved_new = system.rho * nbk\n",
        "\n",
        "    sbk += s_shelved + s_replaced + s_shelved_new- s_requested\n",
        "    nbk += n_shelved + n_replaced - n_requested - s_shelved_new + system.new_orders\n",
        "    srq += s_requested - s_transit\n",
        "    nrq += n_requested - n_transit\n",
        "    strn += s_transit - s_ready\n",
        "    ntrn += n_transit - n_ready\n",
        "    srd += s_ready - s_checked_out\n",
        "    nrd += n_ready - n_checked_out\n",
        "    sch += s_checked_out - s_returned_on_time - s_overdue\n",
        "    nch += n_checked_out - n_returned_on_time - n_overdue\n",
        "    srt += s_returned_on_time + s_returned_late - s_shelved\n",
        "    nrt += n_returned_on_time + n_returned_late - n_shelved\n",
        "    sovr += s_overdue - s_returned_late - s_lost\n",
        "    novr += n_overdue - n_returned_late - n_lost\n",
        "    slo += s_lost - s_replaced\n",
        "    nlo += n_lost - n_replaced\n",
        "\n",
        "    return State(sbk=sbk, nbk=nbk, srq=srq, nrq=nrq, strn=strn, ntrn=ntrn, srd=srd, nrd=nrd,\n",
        "                 sch=sch, nch=nch, srt=srt, nrt=nrt, sovr=sovr, novr=novr, slo=slo, nlo=nlo)"
      ],
      "metadata": {
        "id": "UBEZ7sRaQXrh"
      },
      "execution_count": 453,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# function to run simulation\n",
        "def run_simulation(system, update_func):\n",
        "    frame = TimeFrame(columns=system.init.index)\n",
        "    frame.loc[0] = system.init\n",
        "\n",
        "    for t in range(0, system.t_end):\n",
        "        frame.loc[t+1] = update_func(t, frame.loc[t], system)\n",
        "\n",
        "    return frame"
      ],
      "metadata": {
        "id": "u2cTW7mQA2LQ"
      },
      "execution_count": 454,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Running Simulation"
      ],
      "metadata": {
        "id": "dEAcxJ7LMfLE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# create system\n",
        "system = make_system(alpha, beta, gamma, delta, epsilon, zeta, eta, theta, iota, kappa, mu, nu, rho, new_books)"
      ],
      "metadata": {
        "id": "whkzlpnkCM65"
      },
      "execution_count": 455,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# run simulation\n",
        "results = run_simulation(system, update_func)"
      ],
      "metadata": {
        "id": "cMzRdfzxCIFH"
      },
      "execution_count": 456,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "results.columns = ['Standard Books Available', 'New Books Available', 'Standard Books Requested', 'New Books Requested', 'Standard Books in Transit',\n",
        "                  'New Books in Transit', 'Standard Books Awaiting Pickup', 'New Books Awaiting Pickup', 'Standard Books Checked Out', 'New Books Checked Out',\n",
        "                   'Standard Books Returned', 'New Books Returned', 'Standard Books Overdue', 'New Books Overdue', 'Standard Books Lost', 'New Books Lost']\n",
        "results.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 278
        },
        "id": "oYRePXVaCir-",
        "outputId": "cd768425-cb47-4c3d-fca7-f44914978320"
      },
      "execution_count": 457,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Standard Books Available  New Books Available  Standard Books Requested  \\\n",
              "0              45000.000000          5000.000000                100.000000   \n",
              "1              22635.051282            79.948718              22566.666667   \n",
              "2              11498.233371            80.123223              26361.970085   \n",
              "3               5926.113538            79.745981              23323.763409   \n",
              "4               3135.272981            78.351516              18512.232375   \n",
              "\n",
              "   New Books Requested  Standard Books in Transit  New Books in Transit  \\\n",
              "0            50.000000                  50.000000             70.000000   \n",
              "1          5047.619048                  70.833333             54.880952   \n",
              "2          4887.204954                7575.347222            281.523526   \n",
              "3          4734.604131               14468.833778            443.866690   \n",
              "4          4588.892773               18626.213137            558.357357   \n",
              "\n",
              "   Standard Books Awaiting Pickup  New Books Awaiting Pickup  \\\n",
              "0                      300.000000                 200.000000   \n",
              "1                      212.500000                 150.833333   \n",
              "2                      159.375000                 114.275794   \n",
              "3                     2000.086806                 146.564744   \n",
              "4                     4950.599648                 208.676502   \n",
              "\n",
              "   Standard Books Checked Out  New Books Checked Out  Standard Books Returned  \\\n",
              "0                 4000.000000            1000.000000               100.000000   \n",
              "1                 3909.523810             995.238095               177.428571   \n",
              "2                 3794.189342             974.427438               173.922449   \n",
              "3                 3666.638659             942.917409               169.325666   \n",
              "4                 4158.732420             924.421080               164.177317   \n",
              "\n",
              "   New Books Returned  Standard Books Overdue  New Books Overdue  \\\n",
              "0          100.000000              200.000000         150.000000   \n",
              "1           68.785714              212.380952         152.142857   \n",
              "2           68.543878              223.918367         154.180272   \n",
              "3           67.267172              234.521990         156.001126   \n",
              "4           65.296153              244.164774         157.536213   \n",
              "\n",
              "   Standard Books Lost  New Books Lost  \n",
              "0            30.000000       20.000000  \n",
              "1            27.666667       18.500000  \n",
              "2            25.607937       17.157143  \n",
              "3            23.793537       15.955363  \n",
              "4            22.195924       14.879830  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-64b61d56-d2ef-4182-ada0-4e849ba5fbad\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Standard Books Available</th>\n",
              "      <th>New Books Available</th>\n",
              "      <th>Standard Books Requested</th>\n",
              "      <th>New Books Requested</th>\n",
              "      <th>Standard Books in Transit</th>\n",
              "      <th>New Books in Transit</th>\n",
              "      <th>Standard Books Awaiting Pickup</th>\n",
              "      <th>New Books Awaiting Pickup</th>\n",
              "      <th>Standard Books Checked Out</th>\n",
              "      <th>New Books Checked Out</th>\n",
              "      <th>Standard Books Returned</th>\n",
              "      <th>New Books Returned</th>\n",
              "      <th>Standard Books Overdue</th>\n",
              "      <th>New Books Overdue</th>\n",
              "      <th>Standard Books Lost</th>\n",
              "      <th>New Books Lost</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>45000.000000</td>\n",
              "      <td>5000.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>50.000000</td>\n",
              "      <td>70.000000</td>\n",
              "      <td>300.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>4000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>200.000000</td>\n",
              "      <td>150.000000</td>\n",
              "      <td>30.000000</td>\n",
              "      <td>20.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>22635.051282</td>\n",
              "      <td>79.948718</td>\n",
              "      <td>22566.666667</td>\n",
              "      <td>5047.619048</td>\n",
              "      <td>70.833333</td>\n",
              "      <td>54.880952</td>\n",
              "      <td>212.500000</td>\n",
              "      <td>150.833333</td>\n",
              "      <td>3909.523810</td>\n",
              "      <td>995.238095</td>\n",
              "      <td>177.428571</td>\n",
              "      <td>68.785714</td>\n",
              "      <td>212.380952</td>\n",
              "      <td>152.142857</td>\n",
              "      <td>27.666667</td>\n",
              "      <td>18.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>11498.233371</td>\n",
              "      <td>80.123223</td>\n",
              "      <td>26361.970085</td>\n",
              "      <td>4887.204954</td>\n",
              "      <td>7575.347222</td>\n",
              "      <td>281.523526</td>\n",
              "      <td>159.375000</td>\n",
              "      <td>114.275794</td>\n",
              "      <td>3794.189342</td>\n",
              "      <td>974.427438</td>\n",
              "      <td>173.922449</td>\n",
              "      <td>68.543878</td>\n",
              "      <td>223.918367</td>\n",
              "      <td>154.180272</td>\n",
              "      <td>25.607937</td>\n",
              "      <td>17.157143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5926.113538</td>\n",
              "      <td>79.745981</td>\n",
              "      <td>23323.763409</td>\n",
              "      <td>4734.604131</td>\n",
              "      <td>14468.833778</td>\n",
              "      <td>443.866690</td>\n",
              "      <td>2000.086806</td>\n",
              "      <td>146.564744</td>\n",
              "      <td>3666.638659</td>\n",
              "      <td>942.917409</td>\n",
              "      <td>169.325666</td>\n",
              "      <td>67.267172</td>\n",
              "      <td>234.521990</td>\n",
              "      <td>156.001126</td>\n",
              "      <td>23.793537</td>\n",
              "      <td>15.955363</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3135.272981</td>\n",
              "      <td>78.351516</td>\n",
              "      <td>18512.232375</td>\n",
              "      <td>4588.892773</td>\n",
              "      <td>18626.213137</td>\n",
              "      <td>558.357357</td>\n",
              "      <td>4950.599648</td>\n",
              "      <td>208.676502</td>\n",
              "      <td>4158.732420</td>\n",
              "      <td>924.421080</td>\n",
              "      <td>164.177317</td>\n",
              "      <td>65.296153</td>\n",
              "      <td>244.164774</td>\n",
              "      <td>157.536213</td>\n",
              "      <td>22.195924</td>\n",
              "      <td>14.879830</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-64b61d56-d2ef-4182-ada0-4e849ba5fbad')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-64b61d56-d2ef-4182-ada0-4e849ba5fbad button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-64b61d56-d2ef-4182-ada0-4e849ba5fbad');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0d7aad84-3866-445c-8d25-720045a0167d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0d7aad84-3866-445c-8d25-720045a0167d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0d7aad84-3866-445c-8d25-720045a0167d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "results",
              "summary": "{\n  \"name\": \"results\",\n  \"rows\": 1096,\n  \"fields\": [\n    {\n      \"column\": \"Standard Books Available\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1446.289599523682,\n        \"min\": 742.3797863150178,\n        \"max\": 45000.0,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          2700.3544196190305,\n          2726.741836322819,\n          2697.629772672263\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Available\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 155.11654739111577,\n        \"min\": 75.05586618447369,\n        \"max\": 5000.0,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          154.3138153295016,\n          250.3191512292653,\n          156.38993567789038\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books Requested\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1204.4367256322014,\n        \"min\": 100.0,\n        \"max\": 26361.970085470086,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          4050.535107500565,\n          4089.7171998631798,\n          4047.750746046736\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Requested\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1172.6044084871812,\n        \"min\": 50.0,\n        \"max\": 7079.850540873433,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          3170.9891966328355,\n          5178.19085203269,\n          3211.586109224633\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books in Transit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1024.210278718689,\n        \"min\": 50.0,\n        \"max\": 20140.40397777732,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          5409.1023115636945,\n          5452.25501697027,\n          5399.143194712304\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books in Transit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 226.21094122675586,\n        \"min\": 54.88095238095238,\n        \"max\": 1345.8894300274137,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          601.8077329254772,\n          983.4720383990041,\n          609.1418013082252\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books Awaiting Pickup\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 654.2762708639651,\n        \"min\": 159.375,\n        \"max\": 12432.284108911814,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          4066.0785117498062,\n          4088.7976365393965,\n          4050.610359713027\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Awaiting Pickup\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 170.77302948348097,\n        \"min\": 114.27579365079366,\n        \"max\": 1007.923854613291,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          450.4522427323446,\n          736.000235512395,\n          455.429104292543\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books Checked Out\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2109.941530503259,\n        \"min\": 3666.638659432027,\n        \"max\": 32002.074200632134,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          29143.871577553487,\n          28602.580128245496,\n          28808.99824404626\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Checked Out\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 818.561883629057,\n        \"min\": 924.4210801762126,\n        \"max\": 4671.06385984808,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          2090.7832914120254,\n          3399.674306275544,\n          2104.248575371233\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books Returned\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 107.54808331421282,\n        \"min\": 100.0,\n        \"max\": 1412.6463537098182,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          1340.8159735954198,\n          1348.250952279819,\n          1337.3509928671585\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Returned\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 58.317479137701056,\n        \"min\": 64.15315581536792,\n        \"max\": 329.6956451107252,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          144.4786654201385,\n          239.74467698046777,\n          146.42081521466858\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books Overdue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 540.8876367307456,\n        \"min\": 200.0,\n        \"max\": 4161.473613822994,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          3051.400125669379,\n          4082.2878840112426,\n          3414.6703526551355\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Overdue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 188.83043531528648,\n        \"min\": 150.0,\n        \"max\": 985.9206022923767,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          341.0582803279858,\n          712.3676039625702,\n          377.2324595771863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books Lost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20.022667510839,\n        \"min\": 16.612735483346917,\n        \"max\": 138.65822635062003,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          83.95470397661404,\n          136.03440493374723,\n          101.90231953535046\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Lost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.150893085548666,\n        \"min\": 7.701778615769035,\n        \"max\": 32.69688627149151,\n        \"num_unique_values\": 1096,\n        \"samples\": [\n          10.004043991705664,\n          23.56607644210231,\n          11.495217085400188\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 457
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "results.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 278
        },
        "id": "FTbdHKd5ksG9",
        "outputId": "eba4ca27-ab47-498a-e618-5bde7e770e87"
      },
      "execution_count": 458,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Standard Books Available  New Books Available  Standard Books Requested  \\\n",
              "1091               2780.964315           339.955250               4170.911915   \n",
              "1092               2781.083276           340.120624               4171.090101   \n",
              "1093               2781.202294           340.285975               4171.268372   \n",
              "1094               2781.321370           340.451304               4171.446728   \n",
              "1095               2781.440502           340.616610               4171.625170   \n",
              "\n",
              "      New Books Requested  Standard Books in Transit  New Books in Transit  \\\n",
              "1091          7065.922341                5560.267388           1343.235000   \n",
              "1092          7069.405099                5560.504512           1343.898743   \n",
              "1093          7072.887385                5560.741751           1344.562395   \n",
              "1094          7076.369199                5560.979104           1345.225958   \n",
              "1095          7079.850541                5561.216571           1345.889430   \n",
              "\n",
              "      Standard Books Awaiting Pickup  New Books Awaiting Pickup  \\\n",
              "1091                     4169.667780                1005.932223   \n",
              "1092                     4169.845367                1006.430232   \n",
              "1093                     4170.023040                1006.928174   \n",
              "1094                     4170.200797                1007.426048   \n",
              "1095                     4170.378641                1007.923855   \n",
              "\n",
              "      Standard Books Checked Out  New Books Checked Out  \\\n",
              "1091                29161.834089            4661.751906   \n",
              "1092                29163.064583            4664.080368   \n",
              "1093                29164.295678            4666.408514   \n",
              "1094                29165.527373            4668.736345   \n",
              "1095                29166.759669            4671.063860   \n",
              "\n",
              "      Standard Books Returned  New Books Returned  Standard Books Overdue  \\\n",
              "1091              1374.558395          329.036823             4160.780297   \n",
              "1092              1374.616298          329.201562             4160.953497   \n",
              "1093              1374.674230          329.366279             4161.126783   \n",
              "1094              1374.732190          329.530973             4161.300155   \n",
              "1095              1374.790178          329.695645             4161.473614   \n",
              "\n",
              "      New Books Overdue  Standard Books Lost  New Books Lost  \n",
              "1091         983.917036           138.635231       32.630010  \n",
              "1092         984.418030           138.640975       32.646733  \n",
              "1093         984.918955           138.646723       32.663453  \n",
              "1094         985.419813           138.652473       32.680171  \n",
              "1095         985.920602           138.658226       32.696886  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1863738f-208d-46bb-851f-bf834d673cb3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Standard Books Available</th>\n",
              "      <th>New Books Available</th>\n",
              "      <th>Standard Books Requested</th>\n",
              "      <th>New Books Requested</th>\n",
              "      <th>Standard Books in Transit</th>\n",
              "      <th>New Books in Transit</th>\n",
              "      <th>Standard Books Awaiting Pickup</th>\n",
              "      <th>New Books Awaiting Pickup</th>\n",
              "      <th>Standard Books Checked Out</th>\n",
              "      <th>New Books Checked Out</th>\n",
              "      <th>Standard Books Returned</th>\n",
              "      <th>New Books Returned</th>\n",
              "      <th>Standard Books Overdue</th>\n",
              "      <th>New Books Overdue</th>\n",
              "      <th>Standard Books Lost</th>\n",
              "      <th>New Books Lost</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1091</th>\n",
              "      <td>2780.964315</td>\n",
              "      <td>339.955250</td>\n",
              "      <td>4170.911915</td>\n",
              "      <td>7065.922341</td>\n",
              "      <td>5560.267388</td>\n",
              "      <td>1343.235000</td>\n",
              "      <td>4169.667780</td>\n",
              "      <td>1005.932223</td>\n",
              "      <td>29161.834089</td>\n",
              "      <td>4661.751906</td>\n",
              "      <td>1374.558395</td>\n",
              "      <td>329.036823</td>\n",
              "      <td>4160.780297</td>\n",
              "      <td>983.917036</td>\n",
              "      <td>138.635231</td>\n",
              "      <td>32.630010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1092</th>\n",
              "      <td>2781.083276</td>\n",
              "      <td>340.120624</td>\n",
              "      <td>4171.090101</td>\n",
              "      <td>7069.405099</td>\n",
              "      <td>5560.504512</td>\n",
              "      <td>1343.898743</td>\n",
              "      <td>4169.845367</td>\n",
              "      <td>1006.430232</td>\n",
              "      <td>29163.064583</td>\n",
              "      <td>4664.080368</td>\n",
              "      <td>1374.616298</td>\n",
              "      <td>329.201562</td>\n",
              "      <td>4160.953497</td>\n",
              "      <td>984.418030</td>\n",
              "      <td>138.640975</td>\n",
              "      <td>32.646733</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1093</th>\n",
              "      <td>2781.202294</td>\n",
              "      <td>340.285975</td>\n",
              "      <td>4171.268372</td>\n",
              "      <td>7072.887385</td>\n",
              "      <td>5560.741751</td>\n",
              "      <td>1344.562395</td>\n",
              "      <td>4170.023040</td>\n",
              "      <td>1006.928174</td>\n",
              "      <td>29164.295678</td>\n",
              "      <td>4666.408514</td>\n",
              "      <td>1374.674230</td>\n",
              "      <td>329.366279</td>\n",
              "      <td>4161.126783</td>\n",
              "      <td>984.918955</td>\n",
              "      <td>138.646723</td>\n",
              "      <td>32.663453</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1094</th>\n",
              "      <td>2781.321370</td>\n",
              "      <td>340.451304</td>\n",
              "      <td>4171.446728</td>\n",
              "      <td>7076.369199</td>\n",
              "      <td>5560.979104</td>\n",
              "      <td>1345.225958</td>\n",
              "      <td>4170.200797</td>\n",
              "      <td>1007.426048</td>\n",
              "      <td>29165.527373</td>\n",
              "      <td>4668.736345</td>\n",
              "      <td>1374.732190</td>\n",
              "      <td>329.530973</td>\n",
              "      <td>4161.300155</td>\n",
              "      <td>985.419813</td>\n",
              "      <td>138.652473</td>\n",
              "      <td>32.680171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1095</th>\n",
              "      <td>2781.440502</td>\n",
              "      <td>340.616610</td>\n",
              "      <td>4171.625170</td>\n",
              "      <td>7079.850541</td>\n",
              "      <td>5561.216571</td>\n",
              "      <td>1345.889430</td>\n",
              "      <td>4170.378641</td>\n",
              "      <td>1007.923855</td>\n",
              "      <td>29166.759669</td>\n",
              "      <td>4671.063860</td>\n",
              "      <td>1374.790178</td>\n",
              "      <td>329.695645</td>\n",
              "      <td>4161.473614</td>\n",
              "      <td>985.920602</td>\n",
              "      <td>138.658226</td>\n",
              "      <td>32.696886</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1863738f-208d-46bb-851f-bf834d673cb3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1863738f-208d-46bb-851f-bf834d673cb3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1863738f-208d-46bb-851f-bf834d673cb3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c3edbe1e-b3ae-49d8-b40c-ecde978aabc1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3edbe1e-b3ae-49d8-b40c-ecde978aabc1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c3edbe1e-b3ae-49d8-b40c-ecde978aabc1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"results\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Standard Books Available\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1882296024920513,\n        \"min\": 2780.964314623766,\n        \"max\": 2781.4405020151553,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2781.0832760302687,\n          2781.4405020151553,\n          2781.202294402816\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Available\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.26142536299162766,\n        \"min\": 339.9552503704612,\n        \"max\": 340.6166100377016,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          340.12062390809024,\n          340.6166100377016,\n          340.28597502981444\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books Requested\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28193900080677586,\n        \"min\": 4170.911914960826,\n        \"max\": 4171.625170450538,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4171.0901006191,\n          4171.625170450538,\n          4171.268371761201\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Requested\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.505604266299659,\n        \"min\": 7065.92234139099,\n        \"max\": 7079.850540873433,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7069.405099314262,\n          7079.850540873433,\n          7072.887385159768\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books in Transit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37519756044350233,\n        \"min\": 5560.267387747912,\n        \"max\": 5561.216570794208,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          5560.504512464542,\n          5561.216570794208,\n          5560.74175122144\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books in Transit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0492554210663545,\n        \"min\": 1343.235000448793,\n        \"max\": 1345.8894300274137,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1343.8987427837847,\n          1345.8894300274137,\n          1344.5623951504224\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books Awaiting Pickup\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28099238246663977,\n        \"min\": 4169.667780283467,\n        \"max\": 4170.378640997,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4169.845367125956,\n          4170.378640997,\n          4170.023039533439\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Awaiting Pickup\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.787261698939726,\n        \"min\": 1005.9322225494252,\n        \"max\": 1007.923854613291,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1006.430231811815,\n          1007.923854613291,\n          1006.9281735704895\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books Checked Out\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9470063118242211,\n        \"min\": 29161.834089292377,\n        \"max\": 29166.75966870604,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          29163.064583230087,\n          29166.75966870604,\n          29164.295677832542\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Checked Out\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.6808729720010427,\n        \"min\": 4661.751905965492,\n        \"max\": 4671.06385984808,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4664.080367817765,\n          4671.06385984808,\n          4666.408514053768\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books Returned\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09162007130206547,\n        \"min\": 1374.5583953164032,\n        \"max\": 1374.7901777889347,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1374.616298441271,\n          1374.7901777889347,\n          1374.6742298975425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Returned\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2604222179164317,\n        \"min\": 329.0368232220902,\n        \"max\": 329.6956451107252,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          329.2015621860576,\n          329.6956451107252,\n          329.3662788201347\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books Overdue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2740576808222349,\n        \"min\": 4160.7802966723075,\n        \"max\": 4161.473613822994,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4160.953496732242,\n          4161.473613822994,\n          4161.1267829517865\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Overdue\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7919790079275275,\n        \"min\": 983.9170362758647,\n        \"max\": 985.9206022923767,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          984.4180296330894,\n          985.9206022923767,\n          984.9189550821134\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Standard Books Lost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0090897935376074,\n        \"min\": 138.6352307909511,\n        \"max\": 138.65822635062003,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          138.64097536743037,\n          138.65822635062003,\n          138.6467228197948\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"New Books Lost\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.02643513232164896,\n        \"min\": 32.6300100888762,\n        \"max\": 32.69688627149151,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          32.64673253424146,\n          32.69688627149151,\n          32.66345271292761\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 458
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Visualizations"
      ],
      "metadata": {
        "id": "S_jE1brCyReU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "results.columns = ['sbk', 'nbk', 'srq', 'nrq', 'strn', 'ntrn', 'srd', 'nrd', 'sch', 'nch', 'srt', 'nrt', 'sovr', 'novr', 'slo', 'nlo']\n",
        "\n",
        "def calc_percent_available_and_out(results, system):\n",
        "    final_state = results.iloc[-1]\n",
        "\n",
        "    total_books = (final_state.sbk + final_state.nbk +\n",
        "                   final_state.srq + final_state.nrq +\n",
        "                   final_state.strn + final_state.ntrn +\n",
        "                   final_state.srd + final_state.nrd +\n",
        "                   final_state.sch + final_state.nch +\n",
        "                   final_state.sovr + final_state.novr +\n",
        "                   final_state.srt + final_state.nrt +\n",
        "                   final_state.slo + final_state.nlo)\n",
        "\n",
        "    total_avail_out = (final_state.sbk + final_state.nbk + final_state.sch + final_state.nch)\n",
        "\n",
        "    avail_out_prop = (total_avail_out / total_books)\n",
        "\n",
        "    return avail_out_prop"
      ],
      "metadata": {
        "id": "iACfaTgdXRei"
      },
      "execution_count": 459,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# sweeping parameters\n",
        "\n",
        "eta_array = linspace(0.04, 0.14, 10)\n",
        "\n",
        "theta_array = linspace(0.04, 0.14, 10)\n",
        "\n",
        "def sweep_eta(eta_array, theta):\n",
        "    sweep = SweepSeries()\n",
        "    for eta in eta_array:\n",
        "        system = make_system(alpha, beta, gamma, delta, epsilon, zeta,\n",
        "                             eta, theta, iota, kappa, mu, nu, rho, new_orders)\n",
        "        results = run_simulation(system, update_func)\n",
        "        sweep[eta] = calc_percent_available_and_out(results, system)\n",
        "    return sweep\n",
        "\n",
        "def sweep_parameters(eta_array, theta_array):\n",
        "    frame = SweepFrame(columns=eta_array)\n",
        "    for theta in theta_array:\n",
        "        frame[theta] = sweep_eta(eta_array, theta)\n",
        "    return frame"
      ],
      "metadata": {
        "id": "V1d1c3mYZO5u"
      },
      "execution_count": 460,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "frame = sweep_parameters(eta_array, theta_array)"
      ],
      "metadata": {
        "id": "fmhvVvobZWPX"
      },
      "execution_count": 461,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "contour(frame)\n",
        "\n",
        "decorate(xlabel='Eta',\n",
        "         ylabel='Theta',\n",
        "         title='Fraction Available or Checked Out')"
      ],
      "metadata": {
        "id": "KVZrNtvRQGMz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 309
        },
        "outputId": "4456490d-ef30-4ef9-f245-f35a2d8ce605"
      },
      "execution_count": 462,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 450x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# define x, y, and z\n",
        "theta_array = frame.index.values\n",
        "eta_array = frame.columns.values\n",
        "percent_avail_out = frame.values\n",
        "\n",
        "# Create a meshgrid for 3D plotting\n",
        "Eta, Theta = np.meshgrid(eta_array, theta_array)\n",
        "\n",
        "# Plotting the 3D surface\n",
        "fig = plt.figure(figsize=(10, 8))\n",
        "ax = fig.add_subplot(111, projection='3d')\n",
        "surf = ax.plot_surface(Eta, Theta, percent_avail_out, cmap='viridis')\n",
        "\n",
        "# Adding labels and title\n",
        "ax.set_xlabel('Eta')\n",
        "ax.set_ylabel('Theta')\n",
        "ax.set_zlabel('Fraction Available or Checked Out')\n",
        "ax.set_title('3D Response Surface: Fraction Available or Checked Out')\n",
        "\n",
        "# Adding color bar\n",
        "fig.colorbar(surf, shrink=0.5, aspect=5)\n",
        "\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "id": "KPblGArZjKi6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "outputId": "d78d6536-cd7a-444d-d899-b037e2ebd345"
      },
      "execution_count": 463,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 750x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_sweep_frame(frame):\n",
        "    for theta in frame.index:\n",
        "        row = frame.loc[theta]\n",
        "        for eta in row.index:\n",
        "            metric = row[eta]\n",
        "            plt.plot(eta / theta, metric, '.', color='C1')"
      ],
      "metadata": {
        "id": "PthtfaaY3cGv"
      },
      "execution_count": 464,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_sweep_frame(frame)\n",
        "\n",
        "decorate(xlabel='Ratio of Standard Checkout Time Rate to New Book Checkout Time Rate',\n",
        "         ylabel='Fraction Available or Checked Out')"
      ],
      "metadata": {
        "id": "VbsN7D1g3eiZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 309
        },
        "outputId": "633b3835-58ff-4681-e336-ea0a889aafc1"
      },
      "execution_count": 465,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 450x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Validation & Verification"
      ],
      "metadata": {
        "id": "Px2TSFA8yJcM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The results are valid because the process and parameters are modeled on the New York Public Library's system of online requests and check outs, including approximations of their rates of transfer from one state to another, including exact values where available. Values like the time in transit (4 days) and the time until a book is re-shelved (1 day) are approximations based on personal observation. The check out times (21 days and 14 days for new books) are exact values from the NYPL.  The quantities of books were scaled down, but their ratios were kept in rough proportion.\n",
        "\n",
        "The results have been verified because, in sweeping the parameters eta and theta, the simulation was run 100 times. This shows that the results are replicable and therefore verifiable."
      ],
      "metadata": {
        "id": "zh7gEgopOmTW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Findings"
      ],
      "metadata": {
        "id": "YUViDHBkyOye"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The contour plot confirms what we know intuitively, that allowing patrons to keep their books checked out longer (lower values of eta and theta) will result in a higher percentage of books that are available or checked out. The response surface curve shows the same results in 3D: the highest point on the graph shows the maximum percentage available/ checked out corresponding to the minimum values of eta and theta, and the lowest point on the graph shows the minimum percentage available/ checked out correponding to the maximum values of eta and theta.\n",
        "\n",
        "However, if the library uses the maximum simulated check out times (4 weeks) for each type of book, they may find that there is a significant bottleneck of requests waiting in line to be fulfilled. This could cause dissatisfaction and logistical issues, while technically meeting their stated goal of keeping more books in circulation. Looking at the ratio, therefore, of the standard check out time to the new book check out time may provide another useful decision making metric to inform the library's process while balancing competing needs. Interestingly, the plot of this ratio reveals that the maximum percentage available or checked out occurs when the ratio of standard check out time to new book check out time is 1:1. Intuitively, this may threaten patrons' sense of fairness, that the newer, more in-demand books with longer wait times should be returned in a speedier fashion. What this plot also reveals is that when eta > theta, the maximum percentage available or checked out tends to be higher than when eta < theta. We see this on the response surface curve as well, that when eta is very high and theta is very low, the curve is higher than when eta is very low and theta is very high. If eta > theta, then new books are being checked out for longer periods of time than standard books. Essentially, what this tells us is that maximizing the amount of time that the new books are checked out for has more of an impact on the overall proportion of books that are available or in use than maximizing the amount of time that the standard books are checked out for.\n",
        "\n",
        "One helpful improvement to this model would be to account for renewals. In the system used by the NYPL, new books cannot be renewed, and standard books can be renewed a maximum number of times before being overdue. An additional state, 'renewed,' could be created for standard books which immediately sends the book back into 'checked out' and records the number of times the book has been renewed until the limit has been reached.\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "fmRlMBnKbs8v"
      }
    }
  ]
}
